% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_liquidity.R
\name{get_liquidity}
\alias{get_liquidity}
\title{Calculate Liquidity}
\usage{
get_liquidity(x, y, P, pa, pb, yx = TRUE)
}
\arguments{
\item{x}{amount of token 0 in the exact form, i.e., adjust for decimals (e.g., x1e6 for USDC).}

\item{y}{amount of token 1, in the exact form,  i.e., adjust for decimals (e.g., x1e18 for ETH).}

\item{P}{Price, ideally in token 1/token 0 format. If not, use yx = FALSE.}

\item{pa}{Minimum price of a range, e.g., 0.05 in a 0.05 - 0.25 BTC/ETH position range.}

\item{pb}{Maximum price of a range, e.g., 0.25 in a 0.05 - 0.25 BTC/ETH position range.}

\item{yx}{Default TRUE, assumes Price, P, is in Y/X (Token 1 / Token 0) format as defined in Uni v3 contracts.
Use FALSE to invert P and swap+invert pa and pb.}
}
\value{
Returns a single Big Integer value
}
\description{
This function calculates the liquidity provided by a range using its amount of tokens
in their full decimal form (i.e., convert ETH to Wei by multiplying by 1e18 beforehand!).
It takes human readable prices P, pa, pb, for simplicity, so do not use price_to_sqrtpx96() beforehand.
}
\examples{
# See: https://science.flipsidecrypto.xyz/uni_v3_explained/#Tracking_Liquidity
x = as.bigz('1139289230675491064') # 1.13 LINK, token 0, 18 decimals
y = as.bigz(0.005*1e18) # 0.005 MKR, token 1, 18 decimals
P = 0.009264495 # taken from contract using sqrtpx96_to_price() available in Uni v3 UI.
min_tick <- -50100
max_tick <- -39120
pa = tick_to_price(min_tick)
pb = tick_to_price(max_tick)
# Uniswap value:    343255264548669212
# Calculated value: 343255263830421644
# Within 0.000001\% precision loss
as.numeric(
 get_liquidity(x = x, y = y, P = P, pa = pa, pb = pb, yx = TRUE) / 343255264548669212
 ) - 1 < 0.0000001
}
